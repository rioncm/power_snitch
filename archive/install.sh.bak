#!/bin/bash

# Power Snitch Installation Script
# ==============================
#
# This script will install and configure Power Snitch, a UPS monitoring and notification system.
#
# What will be installed:
# - Power Snitch application files in /opt/power_snitch
# - NUT (Network UPS Tools) for UPS communication
# - Python dependencies from requirements.txt
# - Systemd service for automatic startup
# - Firewall rules for web interface access
#
# What will be configured:
# - NUT for UPS monitoring
# - Web interface with password protection
# - Notification services (webhook, email, SMS)
# - Systemd service for automatic startup
# - Firewall rules for web interface access
#
# What will be modified:
# - /etc/nut/ups.conf (backed up before modification)
# - /etc/nut/nut.conf (backed up before modification)
# - /etc/systemd/system/power_snitch.service
# - /var/log/power_snitch/ (created for logs)
# - Firewall rules (iptables)
#
# Requirements:
# - Root privileges
# - Internet connection for package installation
# - USB-connected UPS
# - Supported operating system (Ubuntu, Debian, Raspbian, CentOS, RHEL, Fedora)
#
# The script will prompt for:
# - Web interface port and admin password
# - UPS name and description
# - Notification service settings (webhook, email, SMS)
#
# All changes will be logged to /var/log/power_snitch/install.log
#
# Press Ctrl+C at any time to abort the installation.

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Error handling
set -eE  # Exit on error and error in pipes

# Global variables
WEB_PORT=8080  # Default port
INSTALL_LOG="/var/log/power_snitch/install.log"
LOG_LEVEL="INFO"

# Installation settings
declare -A INSTALL_SETTINGS=(
    [web_port]=""
    [admin_password]=""
    [ups_name]=""
    [ups_description]=""
    [webhook_enabled]="false"
    [webhook_url]=""
    [webhook_method]="POST"
    [webhook_timeout]="10"
    [email_enabled]="false"
    [smtp_host]=""
    [smtp_port]="587"
    [smtp_username]=""
    [smtp_password]=""
    [from_email]=""
    [to_email]=""
    [sms_enabled]="false"
    [twilio_sid]=""
    [twilio_token]=""
    [twilio_from]=""
    [twilio_to]=""
)

# Function to log messages
log_message() {
    local level=$1
    local message=$2
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    # Write to log file
    echo "[$timestamp] [$level] $message" >> "$INSTALL_LOG"
    
    # Write to console based on level
    case $level in
        "ERROR")
            echo -e "${RED}Error:${NC} $message"
            ;;
        "WARNING")
            echo -e "${YELLOW}Warning:${NC} $message"
            ;;
        "INFO")
            echo -e "${GREEN}==>${NC} $message"
            ;;
        "DEBUG")
            echo -e "${YELLOW}Debug:${NC} $message"
            ;;
    esac
}

# Function to print status messages
print_status() {
    log_message "INFO" "$1"
}

print_warning() {
    log_message "WARNING" "$1"
}

print_error() {
    log_message "ERROR" "$1"
}

# Cleanup function
cleanup() {
    local exit_code=$?
    if [ $exit_code -ne 0 ]; then
        log_message "ERROR" "Installation failed with exit code $exit_code"
        
        # Check what might have gone wrong
        if [ ! -f "/etc/nut/ups.conf" ]; then
            log_message "WARNING" "NUT configuration file not found. NUT installation may have failed."
            log_message "INFO" "Try manually installing NUT: sudo apt-get install nut"
        fi
        
        if [ ! -d "$INSTALL_DIR" ]; then
            log_message "WARNING" "Installation directory was not created."
            log_message "INFO" "Check if you have sufficient permissions: sudo ls -la /opt"
        fi
        
        if [ ! -f "/etc/systemd/system/power_snitch.service" ]; then
            log_message "WARNING" "Service file was not installed."
            log_message "INFO" "Try manually copying the service file: sudo cp power_snitch.service /etc/systemd/system/"
        fi
        
        # Add firewall checks
        if ! command -v iptables &> /dev/null; then
            log_message "WARNING" "iptables is not installed."
            log_message "INFO" "Try installing iptables manually:"
            log_message "INFO" "sudo apt-get install iptables iptables-persistent"
        fi
        
        if ! iptables -C INPUT -p tcp --dport 8080 -j ACCEPT 2>/dev/null; then
            log_message "WARNING" "Firewall rule for web interface is missing."
            log_message "INFO" "Try adding the rule manually:"
            log_message "INFO" "sudo iptables -I INPUT -p tcp --dport 8080 -j ACCEPT"
            log_message "INFO" "sudo netfilter-persistent save"
        fi
        
        log_message "INFO" "For troubleshooting:"
        log_message "INFO" "1. Check the logs above for specific errors"
        log_message "INFO" "2. Ensure all prerequisites are installed"
        log_message "INFO" "3. Verify you have sufficient permissions"
        log_message "INFO" "4. Try running the failed commands manually"
        log_message "INFO" "For support, please file an issue with the above output at:"
        log_message "INFO" "https://github.com/yourusername/power_snitch/issues"
    fi
}

# Set up trap for cleanup
trap cleanup EXIT

# Check if running as root
if [ "$EUID" -ne 0 ]; then
    print_error "Please run as root"
    exit 1
fi

# Create log directory and initialize log file
mkdir -p "$(dirname "$INSTALL_LOG")"
touch "$INSTALL_LOG"
chmod 644 "$INSTALL_LOG"
log_message "INFO" "Starting Power Snitch installation"
log_message "INFO" "Installation log: $INSTALL_LOG"

# Function to detect OS
detect_os() {
    log_message "DEBUG" "Detecting operating system..."
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        OS=$NAME
    elif [ -f /etc/lsb-release ]; then
        . /etc/lsb-release
        OS=$DISTRIB_ID
    else
        OS=$(uname -s)
    fi
    log_message "INFO" "Detected OS: $OS"
}

# Function to install NUT
install_nut() {
    log_message "INFO" "Installing NUT (Network UPS Tools)..."
    case $OS in
        "Ubuntu"|"Debian GNU/Linux")
            log_message "DEBUG" "Using apt-get to install NUT"
            apt-get update
            apt-get install -y nut
            ;;
        "Raspbian GNU/Linux")
            log_message "DEBUG" "Using apt-get to install NUT on Raspbian"
            apt-get update
            apt-get install -y nut
            ;;
        "CentOS Linux"|"Red Hat Enterprise Linux")
            log_message "DEBUG" "Using yum to install NUT"
            yum install -y epel-release
            yum install -y nut
            ;;
        "Fedora")
            log_message "DEBUG" "Using dnf to install NUT"
            dnf install -y nut
            ;;
        *)
            log_message "ERROR" "Unsupported operating system: $OS"
            log_message "INFO" "Please install NUT manually and run this script again"
            exit 1
            ;;
    esac
    log_message "INFO" "NUT installation completed"
}

# Function to check if NUT is installed
check_nut() {
    log_message "DEBUG" "Checking if NUT is installed..."
    if ! command -v upsd &> /dev/null; then
        log_message "INFO" "NUT is not installed"
        install_nut
    else
        log_message "INFO" "NUT is already installed"
    fi
}

# Function to check Python dependencies
check_python_deps() {
    log_message "INFO" "Checking Python dependencies..."
    if ! command -v pip3 &> /dev/null; then
        log_message "DEBUG" "pip3 not found, installing..."
        case $OS in
            "Ubuntu"|"Debian GNU/Linux"|"Raspbian GNU/Linux")
                apt-get update
                apt-get install -y python3-pip
                ;;
            "CentOS Linux"|"Red Hat Enterprise Linux"|"Fedora")
                if command -v dnf &> /dev/null; then
                    dnf install -y python3-pip
                else
                    yum install -y python3-pip
                fi
                ;;
        esac
        log_message "INFO" "Installed pip3"
    fi
    
    # Install jq for JSON processing
    if ! command -v jq &> /dev/null; then
        log_message "DEBUG" "jq not found, installing..."
        case $OS in
            "Ubuntu"|"Debian GNU/Linux"|"Raspbian GNU/Linux")
                apt-get update
                apt-get install -y jq
                ;;
            "CentOS Linux"|"Red Hat Enterprise Linux"|"Fedora")
                if command -v dnf &> /dev/null; then
                    dnf install -y jq
                else
                    yum install -y jq
                fi
                ;;
        esac
        log_message "INFO" "Installed jq"
    fi
    
    log_message "DEBUG" "Installing required Python packages from requirements.txt"
    pip3 install -r "$INSTALL_DIR/requirements.txt"
    log_message "INFO" "Python dependencies installed successfully"
}

# Function to verify installation
verify_installation() {
    log_message "DEBUG" "Verifying installation..."
    local has_errors=0
    
    # Check NUT service
    if ! systemctl is-active --quiet nut-server; then
        log_message "WARNING" "NUT service is not running"
        has_errors=1
    fi
    
    # Check Power Snitch service
    if ! systemctl is-enabled --quiet power_snitch; then
        log_message "WARNING" "Power Snitch service is not enabled"
        has_errors=1
    fi
    
    # Check log directory permissions
    if [ ! -w "$LOG_DIR" ]; then
        log_message "WARNING" "Log directory permissions may be incorrect"
        has_errors=1
    fi
    
    # Check configuration file
    if [ ! -f "$INSTALL_DIR/config.yaml" ]; then
        log_message "WARNING" "Configuration file is missing"
        has_errors=1
    fi
    
    if [ $has_errors -eq 0 ]; then
        log_message "INFO" "Installation verification completed successfully"
    else
        log_message "WARNING" "Installation verification completed with warnings"
    fi
    
    return $has_errors
}

# Function to check for existing installation and load settings
check_existing_installation() {
    local config_file="/opt/power_snitch/config.yaml"
    if [ -f "$config_file" ]; then
        log_message "INFO" "Found existing Power Snitch installation"
        
        # Check if yq is installed for YAML parsing
        if ! command -v yq &> /dev/null; then
            log_message "DEBUG" "Installing yq for YAML parsing..."
            case $OS in
                "Ubuntu"|"Debian GNU/Linux"|"Raspbian GNU/Linux")
                    apt-get update
                    apt-get install -y yq
                    ;;
                "CentOS Linux"|"Red Hat Enterprise Linux"|"Fedora")
                    if command -v dnf &> /dev/null; then
                        dnf install -y yq
                    else
                        yum install -y yq
                    fi
                    ;;
            esac
        fi
        
        # Load existing settings
        log_message "INFO" "Loading existing configuration..."
        
        # Web Interface Settings
        INSTALL_SETTINGS[web_port]=$(yq e '.web_interface.port' "$config_file" 2>/dev/null || echo "8080")
        INSTALL_SETTINGS[admin_password]=$(yq e '.web_interface.password' "$config_file" 2>/dev/null || echo "")
        
        # UPS Settings
        INSTALL_SETTINGS[ups_name]=$(yq e '.ups.name' "$config_file" 2>/dev/null || echo "ups")
        INSTALL_SETTINGS[ups_description]=$(yq e '.ups.desc' "$config_file" 2>/dev/null || echo "My UPS")
        
        # Notification Settings
        INSTALL_SETTINGS[webhook_enabled]=$(yq e '.notifications.webhook.enabled' "$config_file" 2>/dev/null || echo "false")
        if [ "${INSTALL_SETTINGS[webhook_enabled]}" = "true" ]; then
            INSTALL_SETTINGS[webhook_url]=$(yq e '.notifications.webhook.url' "$config_file" 2>/dev/null || echo "")
            INSTALL_SETTINGS[webhook_method]=$(yq e '.notifications.webhook.method' "$config_file" 2>/dev/null || echo "POST")
            INSTALL_SETTINGS[webhook_timeout]=$(yq e '.notifications.webhook.timeout' "$config_file" 2>/dev/null || echo "10")
        fi
        
        INSTALL_SETTINGS[email_enabled]=$(yq e '.notifications.email.enabled' "$config_file" 2>/dev/null || echo "false")
        if [ "${INSTALL_SETTINGS[email_enabled]}" = "true" ]; then
            INSTALL_SETTINGS[smtp_host]=$(yq e '.notifications.email.smtp.host' "$config_file" 2>/dev/null || echo "")
            INSTALL_SETTINGS[smtp_port]=$(yq e '.notifications.email.smtp.port' "$config_file" 2>/dev/null || echo "587")
            INSTALL_SETTINGS[smtp_username]=$(yq e '.notifications.email.smtp.username' "$config_file" 2>/dev/null || echo "")
            INSTALL_SETTINGS[smtp_password]=$(yq e '.notifications.email.smtp.password' "$config_file" 2>/dev/null || echo "")
            INSTALL_SETTINGS[from_email]=$(yq e '.notifications.email.smtp.username' "$config_file" 2>/dev/null || echo "")
            INSTALL_SETTINGS[to_email]=$(yq e '.notifications.email.recipients[0]' "$config_file" 2>/dev/null || echo "")
        fi
        
        INSTALL_SETTINGS[sms_enabled]=$(yq e '.notifications.sms.enabled' "$config_file" 2>/dev/null || echo "false")
        if [ "${INSTALL_SETTINGS[sms_enabled]}" = "true" ]; then
            INSTALL_SETTINGS[twilio_sid]=$(yq e '.notifications.sms.twilio.account_sid' "$config_file" 2>/dev/null || echo "")
            INSTALL_SETTINGS[twilio_token]=$(yq e '.notifications.sms.twilio.auth_token' "$config_file" 2>/dev/null || echo "")
            INSTALL_SETTINGS[twilio_from]=$(yq e '.notifications.sms.twilio.from_number' "$config_file" 2>/dev/null || echo "")
            INSTALL_SETTINGS[twilio_to]=$(yq e '.notifications.sms.recipients[0]' "$config_file" 2>/dev/null || echo "")
        fi
        
        return 0
    else
        log_message "INFO" "No existing installation found"
        return 1
    fi
}

# Function to collect all user settings
collect_user_settings() {
    log_message "INFO" "Collecting installation settings..."
    
    # Check for existing installation
    if check_existing_installation; then
        log_message "INFO" "Found existing installation. Current settings:"
        log_message "INFO" "Web Interface:"
        log_message "INFO" "  Port: ${INSTALL_SETTINGS[web_port]}"
        log_message "INFO" "UPS Configuration:"
        log_message "INFO" "  Name: ${INSTALL_SETTINGS[ups_name]}"
        log_message "INFO" "  Description: ${INSTALL_SETTINGS[ups_description]}"
        log_message "INFO" "Notification Services:"
        log_message "INFO" "  Webhook: ${INSTALL_SETTINGS[webhook_enabled]}"
        log_message "INFO" "  Email: ${INSTALL_SETTINGS[email_enabled]}"
        log_message "INFO" "  SMS: ${INSTALL_SETTINGS[sms_enabled]}"
        
        read -p "Do you want to keep these settings? (Y/n): " keep_settings
        if [[ ! $keep_settings =~ ^[Nn]$ ]]; then
            log_message "INFO" "Using existing settings"
            return
        fi
    fi
    
    # Web Interface Settings
    log_message "INFO" "Web Interface Configuration"
    read -p "Enter web interface port (default: ${INSTALL_SETTINGS[web_port]:-8080}): " port
    INSTALL_SETTINGS[web_port]=${port:-${INSTALL_SETTINGS[web_port]:-8080}}
    
    # Validate port number
    if ! [[ "${INSTALL_SETTINGS[web_port]}" =~ ^[0-9]+$ ]] || [ "${INSTALL_SETTINGS[web_port]}" -lt 1 ] || [ "${INSTALL_SETTINGS[web_port]}" -gt 65535 ]; then
        log_message "ERROR" "Invalid port number: ${INSTALL_SETTINGS[web_port]}"
        log_message "INFO" "Please enter a number between 1 and 65535."
        exit 1
    fi
    
    # Admin Password
    log_message "INFO" "Admin Password Configuration"
    if [ -n "${INSTALL_SETTINGS[admin_password]}" ]; then
        read -p "Current password is set. Do you want to change it? (y/N): " change_password
        if [[ $change_password =~ ^[Yy]$ ]]; then
            read -s -p "Enter new admin password: " admin_password
            echo
            read -s -p "Confirm new admin password: " admin_password_confirm
            echo
            
            if [ "$admin_password" != "$admin_password_confirm" ]; then
                log_message "ERROR" "Passwords do not match!"
                exit 1
            fi
            
            # Hash the password using Python's bcrypt
            log_message "DEBUG" "Hashing admin password..."
            INSTALL_SETTINGS[admin_password]=$(python3 -c "
import bcrypt
password = '$admin_password'.encode('utf-8')
salt = bcrypt.gensalt()
hashed = bcrypt.hashpw(password, salt)
print(hashed.decode('utf-8'))
")
        fi
    else
        read -s -p "Enter admin password: " admin_password
        echo
        read -s -p "Confirm admin password: " admin_password_confirm
        echo
        
        if [ "$admin_password" != "$admin_password_confirm" ]; then
            log_message "ERROR" "Passwords do not match!"
            exit 1
        fi
        
        # Hash the password using Python's bcrypt
        log_message "DEBUG" "Hashing admin password..."
        INSTALL_SETTINGS[admin_password]=$(python3 -c "
import bcrypt
password = '$admin_password'.encode('utf-8')
salt = bcrypt.gensalt()
hashed = bcrypt.hashpw(password, salt)
print(hashed.decode('utf-8'))
")
    fi
    
    # UPS Configuration
    log_message "INFO" "UPS Configuration"
    read -p "Enter UPS name (default: ${INSTALL_SETTINGS[ups_name]:-ups}): " ups_name
    INSTALL_SETTINGS[ups_name]=${ups_name:-${INSTALL_SETTINGS[ups_name]:-ups}}
    
    read -p "Enter a description for your UPS (e.g., 'Office UPS') (default: ${INSTALL_SETTINGS[ups_description]:-"My UPS"}): " ups_description
    INSTALL_SETTINGS[ups_description]=${ups_description:-${INSTALL_SETTINGS[ups_description]:-"My UPS"}}
    
    # Notification Services
    log_message "INFO" "Notification Services Configuration"
    
    # Webhook
    read -p "Enable webhook notifications? (y/N) (current: ${INSTALL_SETTINGS[webhook_enabled]}): " enable_webhook
    if [[ $enable_webhook =~ ^[Yy]$ ]]; then
        INSTALL_SETTINGS[webhook_enabled]="true"
        read -p "Enter webhook URL (current: ${INSTALL_SETTINGS[webhook_url]}): " webhook_url
        INSTALL_SETTINGS[webhook_url]=${webhook_url:-${INSTALL_SETTINGS[webhook_url]}}
        
        read -p "Enter webhook method (default: ${INSTALL_SETTINGS[webhook_method]:-POST}): " webhook_method
        INSTALL_SETTINGS[webhook_method]=${webhook_method:-${INSTALL_SETTINGS[webhook_method]:-POST}}
        
        read -p "Enter webhook timeout (default: ${INSTALL_SETTINGS[webhook_timeout]:-10}): " webhook_timeout
        INSTALL_SETTINGS[webhook_timeout]=${webhook_timeout:-${INSTALL_SETTINGS[webhook_timeout]:-10}}
    else
        INSTALL_SETTINGS[webhook_enabled]="false"
    fi
    
    # Email
    read -p "Enable email notifications? (y/N) (current: ${INSTALL_SETTINGS[email_enabled]}): " enable_email
    if [[ $enable_email =~ ^[Yy]$ ]]; then
        INSTALL_SETTINGS[email_enabled]="true"
        read -p "Enter SMTP server (current: ${INSTALL_SETTINGS[smtp_host]}): " smtp_host
        INSTALL_SETTINGS[smtp_host]=${smtp_host:-${INSTALL_SETTINGS[smtp_host]}}
        
        read -p "Enter SMTP port (default: ${INSTALL_SETTINGS[smtp_port]:-587}): " smtp_port
        INSTALL_SETTINGS[smtp_port]=${smtp_port:-${INSTALL_SETTINGS[smtp_port]:-587}}
        
        read -p "Enter SMTP username (current: ${INSTALL_SETTINGS[smtp_username]}): " smtp_username
        INSTALL_SETTINGS[smtp_username]=${smtp_username:-${INSTALL_SETTINGS[smtp_username]}}
        
        read -s -p "Enter SMTP password (press Enter to keep current): " smtp_password
        echo
        if [ -n "$smtp_password" ]; then
            INSTALL_SETTINGS[smtp_password]=$smtp_password
        fi
        
        read -p "Enter sender email (current: ${INSTALL_SETTINGS[from_email]}): " from_email
        INSTALL_SETTINGS[from_email]=${from_email:-${INSTALL_SETTINGS[from_email]}}
        
        read -p "Enter recipient email (current: ${INSTALL_SETTINGS[to_email]}): " to_email
        INSTALL_SETTINGS[to_email]=${to_email:-${INSTALL_SETTINGS[to_email]}}
    else
        INSTALL_SETTINGS[email_enabled]="false"
    fi
    
    # SMS
    read -p "Enable SMS notifications? (y/N) (current: ${INSTALL_SETTINGS[sms_enabled]}): " enable_sms
    if [[ $enable_sms =~ ^[Yy]$ ]]; then
        INSTALL_SETTINGS[sms_enabled]="true"
        read -p "Enter Twilio Account SID (current: ${INSTALL_SETTINGS[twilio_sid]}): " twilio_sid
        INSTALL_SETTINGS[twilio_sid]=${twilio_sid:-${INSTALL_SETTINGS[twilio_sid]}}
        
        read -s -p "Enter Twilio Auth Token (press Enter to keep current): " twilio_token
        echo
        if [ -n "$twilio_token" ]; then
            INSTALL_SETTINGS[twilio_token]=$twilio_token
        fi
        
        read -p "Enter Twilio From Number (current: ${INSTALL_SETTINGS[twilio_from]}): " twilio_from
        INSTALL_SETTINGS[twilio_from]=${twilio_from:-${INSTALL_SETTINGS[twilio_from]}}
        
        read -p "Enter recipient phone number (current: ${INSTALL_SETTINGS[twilio_to]}): " twilio_to
        INSTALL_SETTINGS[twilio_to]=${twilio_to:-${INSTALL_SETTINGS[twilio_to]}}
    else
        INSTALL_SETTINGS[sms_enabled]="false"
    fi
    
    # Review settings
    log_message "INFO" "Reviewing installation settings..."
    log_message "INFO" "Web Interface:"
    log_message "INFO" "  Port: ${INSTALL_SETTINGS[web_port]}"
    log_message "INFO" "UPS Configuration:"
    log_message "INFO" "  Name: ${INSTALL_SETTINGS[ups_name]}"
    log_message "INFO" "  Description: ${INSTALL_SETTINGS[ups_description]}"
    log_message "INFO" "Notification Services:"
    log_message "INFO" "  Webhook: ${INSTALL_SETTINGS[webhook_enabled]}"
    log_message "INFO" "  Email: ${INSTALL_SETTINGS[email_enabled]}"
    log_message "INFO" "  SMS: ${INSTALL_SETTINGS[sms_enabled]}"
    
    read -p "Proceed with installation? (y/N): " proceed
    if [[ ! $proceed =~ ^[Yy]$ ]]; then
        log_message "INFO" "Installation cancelled by user"
        exit 0
    fi
}

# Function to configure config.yaml and notification services
configure_power_snitch() {
    log_message "INFO" "Configuring Power Snitch..."
    local config_file="$INSTALL_DIR/config.yaml"
    
    # Create initial config file with web interface settings
    log_message "DEBUG" "Creating initial configuration..."
    cat > "$config_file" << EOF
# Web Interface Settings
web_interface:
  port: ${INSTALL_SETTINGS[web_port]}
  password: "${INSTALL_SETTINGS[admin_password]}"

# UPS Configuration
ups:
  name: "${INSTALL_SETTINGS[ups_name]}"  # Name in ups.conf
  poll_interval: 5  # seconds between checks

# Notification Settings
notifications:
  enabled_services: []
EOF
    
    # Update notification services
    if [ "${INSTALL_SETTINGS[webhook_enabled]}" = "true" ]; then
        log_message "DEBUG" "Updating webhook settings..."
        cat >> "$config_file" << EOF
  webhook:
    enabled: true
    url: "${INSTALL_SETTINGS[webhook_url]}"
    method: ${INSTALL_SETTINGS[webhook_method]}
    timeout: ${INSTALL_SETTINGS[webhook_timeout]}
    headers:
      X-API-Key: "your-api-key-here"
      Authorization: "Bearer your-token-here"
EOF
    fi
    
    if [ "${INSTALL_SETTINGS[email_enabled]}" = "true" ]; then
        log_message "DEBUG" "Updating email settings..."
        cat >> "$config_file" << EOF
  email:
    enabled: true
    smtp:
      host: "${INSTALL_SETTINGS[smtp_host]}"
      port: ${INSTALL_SETTINGS[smtp_port]}
      username: "${INSTALL_SETTINGS[smtp_username]}"
      password: "${INSTALL_SETTINGS[smtp_password]}"
      use_tls: true
    recipients:
      - "${INSTALL_SETTINGS[to_email]}"
EOF
    fi
    
    if [ "${INSTALL_SETTINGS[sms_enabled]}" = "true" ]; then
        log_message "DEBUG" "Updating SMS settings..."
        cat >> "$config_file" << EOF
  sms:
    enabled: true
    twilio:
      account_sid: "${INSTALL_SETTINGS[twilio_sid]}"
      auth_token: "${INSTALL_SETTINGS[twilio_token]}"
      from_number: "${INSTALL_SETTINGS[twilio_from]}"
    recipients:
      - "${INSTALL_SETTINGS[twilio_to]}"
EOF
    fi
    
    # Update enabled services list
    local enabled_services=()
    [ "${INSTALL_SETTINGS[webhook_enabled]}" = "true" ] && enabled_services+=("webhook")
    [ "${INSTALL_SETTINGS[email_enabled]}" = "true" ] && enabled_services+=("email")
    [ "${INSTALL_SETTINGS[sms_enabled]}" = "true" ] && enabled_services+=("sms")
    
    if [ ${#enabled_services[@]} -gt 0 ]; then
        log_message "DEBUG" "Updating enabled services list..."
        services_json=$(printf '%s\n' "${enabled_services[@]}" | jq -R . | jq -s .)
        awk -v services="$services_json" '
            /enabled_services:/ { print "  enabled_services: " services; next }
            { print }
        ' "$config_file" > "$config_file.tmp" && mv "$config_file.tmp" "$config_file"
    fi
    
    # Add triggers section
    log_message "DEBUG" "Adding triggers section..."
    cat >> "$config_file" << 'EOF'

# Notification Triggers
triggers:
  battery_level_change: 5  # Notify on 5% battery level change
  load_change: 5  # Notify on 5% load change
  always_notify:
    - power_failure  # Always notify on power failure
    - power_restored  # Always notify on power restored
    - low_battery    # Always notify on low battery (below 20%)
EOF
    
    # Set proper permissions
    chmod 600 "$config_file"
    chown root:root "$config_file"
    
    log_message "INFO" "Configuration completed successfully!"
}

# Function to configure UPS
configure_ups() {
    log_message "INFO" "Configuring UPS..."
    
    # Backup existing ups.conf if it exists
    if [ -f /etc/nut/ups.conf ]; then
        cp /etc/nut/ups.conf /etc/nut/ups.conf.bak
        log_message "INFO" "Backed up existing ups.conf to ups.conf.bak"
    fi
    
    # Create ups.conf with USB configuration
    cat > /etc/nut/ups.conf << EOF
[${INSTALL_SETTINGS[ups_name]}]
    driver = usbhid-ups
    port = auto
    desc = "${INSTALL_SETTINGS[ups_description]}"
EOF
    
    log_message "INFO" "Created UPS configuration with description: ${INSTALL_SETTINGS[ups_description]}"
    
    # Set correct permissions
    chmod 640 /etc/nut/ups.conf
    chown root:nut /etc/nut/ups.conf
    log_message "DEBUG" "Set correct permissions on ups.conf"
}

# Function to install and configure iptables
configure_firewall() {
    log_message "INFO" "Configuring firewall rules..."
    
    # Check if iptables is installed
    if ! command -v iptables &> /dev/null; then
        log_message "DEBUG" "iptables not found, installing..."
        case $OS in
            "Ubuntu"|"Debian GNU/Linux"|"Raspbian GNU/Linux")
                apt-get update
                apt-get install -y iptables
                ;;
            "CentOS Linux"|"Red Hat Enterprise Linux"|"Fedora")
                if command -v dnf &> /dev/null; then
                    dnf install -y iptables-services
                else
                    yum install -y iptables-services
                fi
                ;;
        esac
        log_message "INFO" "Installed iptables"
    fi
    
    # Install iptables-persistent
    case $OS in
        "Ubuntu"|"Debian GNU/Linux"|"Raspbian GNU/Linux")
            log_message "DEBUG" "Installing iptables-persistent..."
            # Pre-seed the debconf database to avoid prompts
            echo "iptables-persistent iptables-persistent/autosave_v4 boolean true" | debconf-set-selections
            echo "iptables-persistent iptables-persistent/autosave_v6 boolean true" | debconf-set-selections
            apt-get install -y iptables-persistent
            ;;
        "CentOS Linux"|"Red Hat Enterprise Linux"|"Fedora")
            systemctl enable iptables
            ;;
    esac
    
    # Add rules for web interface
    log_message "DEBUG" "Adding firewall rules for web interface..."
    
    # Check if rule already exists
    if ! iptables -C INPUT -p tcp --dport ${INSTALL_SETTINGS[web_port]} -j ACCEPT 2>/dev/null; then
        # Add rule for web interface
        iptables -I INPUT -p tcp --dport ${INSTALL_SETTINGS[web_port]} -j ACCEPT
        log_message "INFO" "Added rule for web interface port ${INSTALL_SETTINGS[web_port]}"
    else
        log_message "INFO" "Rule for web interface port ${INSTALL_SETTINGS[web_port]} already exists"
    fi
    
    # Save rules
    case $OS in
        "Ubuntu"|"Debian GNU/Linux"|"Raspbian GNU/Linux")
            netfilter-persistent save
            systemctl enable netfilter-persistent
            ;;
        "CentOS Linux"|"Red Hat Enterprise Linux"|"Fedora")
            service iptables save
            ;;
    esac
    
    log_message "INFO" "Firewall configuration completed"
}

# Function to verify firewall configuration
verify_firewall() {
    log_message "DEBUG" "Verifying firewall configuration..."
    local has_errors=0
    
    # Check if iptables is running
    if ! iptables -L > /dev/null 2>&1; then
        log_message "WARNING" "iptables is not running"
        has_errors=1
    fi
    
    # Check if web interface port is open
    if ! iptables -C INPUT -p tcp --dport ${INSTALL_SETTINGS[web_port]} -j ACCEPT 2>/dev/null; then
        log_message "WARNING" "Web interface port ${INSTALL_SETTINGS[web_port]} is not open in firewall"
        has_errors=1
    fi
    
    # Check if iptables-persistent is installed (Debian-based systems)
    case $OS in
        "Ubuntu"|"Debian GNU/Linux"|"Raspbian GNU/Linux")
            if ! dpkg -l | grep -q iptables-persistent; then
                log_message "WARNING" "iptables-persistent is not installed"
                has_errors=1
            fi
            ;;
        "CentOS Linux"|"Red Hat Enterprise Linux"|"Fedora")
            if ! systemctl is-enabled --quiet iptables; then
                log_message "WARNING" "iptables service is not enabled"
                has_errors=1
            fi
            ;;
    esac
    
    if [ $has_errors -eq 0 ]; then
        log_message "INFO" "Firewall verification completed successfully"
    else
        log_message "WARNING" "Firewall verification completed with warnings"
    fi
    
    return $has_errors
}

# Main installation process
log_message "INFO" "Starting Power Snitch installation process"

# Collect all user settings upfront
collect_user_settings

# Detect OS
detect_os

# Check and install NUT
check_nut

# Create installation directory
INSTALL_DIR="/opt/power_snitch"
log_message "INFO" "Creating installation directory..."
mkdir -p "$INSTALL_DIR"

# Create log directory
LOG_DIR="/var/log/power_snitch"
log_message "INFO" "Creating log directory..."
mkdir -p "$LOG_DIR"

# Copy application files
log_message "INFO" "Copying application files..."
cp -r ./* "$INSTALL_DIR/"

# Set permissions
log_message "INFO" "Setting permissions..."
chown -R root:root "$INSTALL_DIR"
chmod -R 755 "$INSTALL_DIR"
chown -R root:root "$LOG_DIR"
chmod -R 755 "$LOG_DIR"

# Check Python dependencies
check_python_deps

# Configure firewall
log_message "INFO" "Setting up firewall..."
configure_firewall

# Install systemd service
log_message "INFO" "Installing systemd service..."
cp "$INSTALL_DIR/power_snitch.service" /etc/systemd/system/
systemctl daemon-reload
systemctl enable power_snitch.service

# Configure NUT
log_message "INFO" "Configuring NUT..."
if [ ! -f /etc/nut/nut.conf.bak ]; then
    cp /etc/nut/nut.conf /etc/nut/nut.conf.bak
fi
echo 'MODE=standalone' > /etc/nut/nut.conf

# Configure UPS
configure_ups

# Configure Power Snitch
configure_power_snitch

# Start NUT service
log_message "INFO" "Starting NUT service..."
systemctl enable nut-server
systemctl restart nut-server

# Verify UPS connection
log_message "INFO" "Verifying UPS connection..."
sleep 2  # Give NUT a moment to detect the UPS
if upsc "${INSTALL_SETTINGS[ups_name]}" 2>/dev/null; then
    log_message "INFO" "UPS connection successful!"
else
    log_message "WARNING" "Could not connect to UPS. Please check your USB connection and try:"
    log_message "INFO" "1. sudo systemctl restart nut-server"
    log_message "INFO" "2. sudo upsc ${INSTALL_SETTINGS[ups_name]}"
fi

# Verify firewall configuration
log_message "INFO" "Verifying firewall configuration..."
verify_firewall

# Verify installation
log_message "INFO" "Verifying installation..."
if verify_installation; then
    log_message "INFO" "Installation completed successfully!"
else
    log_message "WARNING" "Installation completed with warnings."
fi

# Print next steps
log_message "INFO" "Installation completed. Next steps:"
log_message "INFO" "1. Configure your UPS in /etc/nut/ups.conf:"
log_message "INFO" "   Example configuration:"
log_message "INFO" "   [${INSTALL_SETTINGS[ups_name]}]"
log_message "INFO" "       driver = usbhid-ups"
log_message "INFO" "       port = auto"
log_message "INFO" "       desc = \"${INSTALL_SETTINGS[ups_description]}\""
log_message "INFO" ""
log_message "INFO" "2. Find your UPS driver:"
log_message "INFO" "   sudo nut-scanner -U"
log_message "INFO" ""
log_message "INFO" "3. Test your UPS configuration:"
log_message "INFO" "   sudo upsc ${INSTALL_SETTINGS[ups_name]}"
log_message "INFO" ""
log_message "INFO" "4. Start Power Snitch:"
log_message "INFO" "   sudo systemctl start power_snitch"
log_message "INFO" ""
log_message "INFO" "5. Access the web interface:"
log_message "INFO" "   http://$(hostname -I | cut -d' ' -f1):${INSTALL_SETTINGS[web_port]}"
log_message "INFO" "   Default credentials: admin/admin"
log_message "INFO" ""
log_message "INFO" "Important security notes:"
log_message "INFO" "- Change the default web interface password immediately"
log_message "INFO" "- Secure your config.yaml file permissions"
log_message "INFO" "- Consider setting up HTTPS with a reverse proxy"
log_message "INFO" ""
log_message "INFO" "Useful commands:"
log_message "INFO" "- Check service status: sudo systemctl status power_snitch"
log_message "INFO" "- View logs: sudo journalctl -u power_snitch -f"
log_message "INFO" "- Configuration file: /opt/power_snitch/config.yaml"
log_message "INFO" "- Log directory: /var/log/power_snitch/"
log_message "INFO" ""
log_message "INFO" "If you encounter any issues:"
log_message "INFO" "1. Check the logs: tail -f /var/log/power_snitch/*.log"
log_message "INFO" "2. Verify UPS connection: sudo upsc ${INSTALL_SETTINGS[ups_name]}"
log_message "INFO" "3. Check service status: sudo systemctl status power_snitch"
log_message "INFO" "4. Review configuration: sudo nano /opt/power_snitch/config.yaml"
log_message "INFO" ""
log_message "INFO" "Firewall Configuration:"
log_message "INFO" "- Web interface port ${INSTALL_SETTINGS[web_port]} is open in the firewall"
log_message "INFO" "- Firewall rules are persistent across reboots"
log_message "INFO" "- To view current firewall rules: sudo iptables -L"
log_message "INFO" "- To modify rules: edit and then run 'sudo netfilter-persistent save'"
log_message "INFO" ""
log_message "INFO" "For additional help, visit: https://github.com/yourusername/power_snitch"

# Restart the Power Snitch service to apply all changes
log_message "INFO" "Restarting Power Snitch service..."
systemctl restart power_snitch
log_message "INFO" "Power Snitch service restarted successfully"

log_message "INFO" "Installation process completed" 